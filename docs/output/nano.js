Ext.data.JsonP.nano({"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/nano.html#nano' target='_blank'>nano.js</a></div></pre><div class='doc-contents'><p>nano core.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-define' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-define' class='name expandable'>define</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> name, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> o</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></div><div class='description'><div class='short'>Define new class. ...</div><div class='long'><p>Define new class.</p>\n\n<pre class='inline-example '><code>nano.define('my.new.SillyClass', {\n    extend: 'my.old.SillyClass',\n    mixin: 'nano.util.Observable',\n    statics: {\n        instance: true\n    }\n});\n</code></pre>\n\n<h2>Mixins</h2>\n\n<pre class='inline-example '><code>// This will mixin all functions from SomeClass\nnano.define('TestClass', {\n    mixin: 'some.namespace.SomeClass',\n    constructor: function() {\n        // Call mixed class contructor\n        this.mixins.SomeClass.constructor.call(this);\n    }\n});\n\n// This will mix only two methods: 'foo' and 'bar'\nnano.define('TestClass', {\n    mixin: {\n        'SomeClass': { \n            cls: 'some.namespace.SomeClass',\n            methods: ['foo', 'bar'] \n        }\n    },\n    hello: function() {\n        this.foo();\n    }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Class name</p>\n</div></li><li><span class='pre'>o</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Class definition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-namespace' class='name expandable'>namespace</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> namespace, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> root, Mixed value</span> ) : Mixed</div><div class='description'><div class='short'>Create namespace. ...</div><div class='long'><p>Create namespace.</p>\n\n<p>If namespace exists, it will be just returned.</p>\n\n<p>NOTE: If value is provided and namespace already exists it will be overwrited!</p>\n\n<p>@example</p>\n\n<pre><code>// Create namespace on _nano_'s root object \n// (it's _window_ in browser)\nnano.namespace('foo.bar');\n\n// Creates window.foo.bar with value 'hello'\nnano.namespace('foo.bar', undefined, 'hello');\n\n// Multiple namespaces can be created too...\nnano.namespace(['foo.bar', object], ['bar.foo', root]);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespace</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Namespace name.</p>\n</div></li><li><span class='pre'>root</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Base object.</p>\n</div></li><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>Optional. Value to set.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>Newly created namespace.</p>\n</div></li></ul></div></div></div><div id='method-tmpl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-tmpl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-tmpl' class='name expandable'>tmpl</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> text, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> data</span> ) : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></div><div class='description'><div class='short'>Template function. ...</div><div class='long'><p>Template function. It use _.template method but\nwith Twig syntax, so instead of:\n* &lt;% %> is {% %}\n* &lt;%= %> is {{ }}\n* &lt;%- %> is {{- }}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'>\n</div></li><li><span class='pre'>data</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","mixedInto":[],"subclasses":[],"aliases":{},"inheritdoc":null,"superclasses":[],"tagname":"class","files":[{"href":"nano.html#nano","filename":"nano.js"}],"parentMixins":[],"html_meta":{},"alternateClassNames":[],"members":{"css_var":[],"event":[],"method":[{"tagname":"method","owner":"nano","name":"define","id":"method-define","meta":{}},{"tagname":"method","owner":"nano","name":"namespace","id":"method-namespace","meta":{}},{"tagname":"method","owner":"nano","name":"tmpl","id":"method-tmpl","meta":{}}],"css_mixin":[],"cfg":[],"property":[]},"extends":null,"requires":[],"singleton":true,"statics":{"event":[],"css_var":[],"method":[],"css_mixin":[],"cfg":[],"property":[]},"name":"nano","mixins":[],"code_type":"assignment","inheritable":false,"uses":[],"id":"class-nano","component":false,"meta":{}});