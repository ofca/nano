Ext.data.JsonP.nano({"html":"<div><pre class=\"hierarchy\"><h4>Requires</h4><div class='dependency'>_</div><h4>Files</h4><div class='dependency'><a href='source/nano.html#nano' target='_blank'>nano.js</a></div></pre><div class='doc-contents'><p>nano core.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-autoload' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-property-autoload' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-property-autoload' class='name expandable'>autoload</a><span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a></span></div><div class='description'><div class='short'>Flag indicating whether missing classes should be loaded or not. ...</div><div class='long'><p>Flag indicating whether missing classes should be loaded or not.</p>\n<p>Defaults to: <code>false</code></p></div></div></div><div id='property-noop' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-property-noop' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-property-noop' class='name not-expandable'>noop</a><span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span></div><div class='description'><div class='short'><p>Dummy function.</p>\n</div><div class='long'><p>Dummy function.</p>\n</div></div></div><div id='property-scope' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-property-scope' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-property-scope' class='name expandable'>scope</a><span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span></div><div class='description'><div class='short'>Shortcut to global object (in browser it will be window). ...</div><div class='long'><p>Shortcut to global object (in browser it will be window). All classes\nare defined on this object.</p>\n\n<pre class='inline-example '><code>nano.namespace('foo.bar');\n\n// will create\nnano.scope.foo.bar\n// in browser it's equal\nwindow.foo.bar\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-ajax' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-ajax' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-ajax' class='name expandable'>ajax</a>( <span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> o</span> ) : XMLHttpRequest/ActiveXObject</div><div class='description'><div class='short'>Simple ajax method. ...</div><div class='long'><p>Simple ajax method.</p>\n\n<pre><code>var xhr = nano.ajax({\n   url: 'foo.php',\n   success: function() {\n\n   }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Configuration</p>\n<ul><li><span class='pre'>url</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'></div></li><li><span class='pre'>method</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>GET/POST/PUT/etc. Default GET.</p>\n</div></li><li><span class='pre'>async</span> : <a href=\"#!/api/Boolean\" rel=\"Boolean\" class=\"docClass\">Boolean</a><div class='sub-desc'><p>Default true.</p>\n</div></li><li><span class='pre'>headers</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Default Content-Type: application/x-www-form-urlencoded</p>\n</div></li><li><span class='pre'>onReadyStateChange</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>/<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'><p>Function called when state change.</p>\n</div></li><li><span class='pre'>complete</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>/<a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a><div class='sub-desc'><p>Function called when request is complete.</p>\n</div></li><li><span class='pre'>params</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Params and values to send in request</p>\n</div></li><li><span class='pre'>dataType</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Data type: plaintext or json (default is plaintext).</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>XMLHttpRequest/ActiveXObject</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-call' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-call' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-call' class='name expandable'>call</a>( <span class='pre'><a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> o, <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/Mixed params</span> ) : Mixed</div><div class='description'><div class='short'>This is special version of Function.apply. ...</div><div class='long'><p>This is special version of <a href=\"#!/api/Function-method-apply\" rel=\"Function-method-apply\" class=\"docClass\">Function.apply</a>.</p>\n\n<pre><code>function hello(name, lastname) {\n    return 'Hello ' + name + (lastname ? ' ' + lastname : '');\n};\n\nnano.call(hello, 'Joe'); // result will be \"Hello Joe\";\n\n// If you need to pass more then one param then second\n// parameter must be an Array\nnano.call(hello, ['Joe', 'Kowalski']); // result will be \"Hello Joe Kowalski\";\n\n// You can call this function on custom scope:\nnano.call([hello, scope], 'Joe');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>Function to call, or Array where first item is function to call and second is scope.</p>\n</div></li><li><span class='pre'>params</span> : <a href=\"#!/api/Array\" rel=\"Array\" class=\"docClass\">Array</a>/Mixed<div class='sub-desc'><p>Array of parameters</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>Return result of executed function.</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-create' class='name expandable'>create</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> ns, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> o</span> ) : Mixed</div><div class='description'><div class='short'>Creates instance of class. ...</div><div class='long'><p>Creates instance of class. If class is not loaded,\nand autoloader is on, class will be loaded dynamically.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>ns</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Class name to create instance of.</p>\n</div></li><li><span class='pre'>o</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Configuration object.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>Instance of class.</p>\n</div></li></ul></div></div></div><div id='method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-define' class='name expandable'>define</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> name, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> o</span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></div><div class='description'><div class='short'>Define new class. ...</div><div class='long'><p>Define new class.</p>\n\n<pre class='inline-example '><code>nano.define('my.new.SillyClass', {\n    extend: 'my.old.SillyClass',\n    mixin: 'nano.util.Observable',\n    statics: {\n        instance: true\n    }\n});\n</code></pre>\n\n<h2>Mixins</h2>\n\n<pre class='inline-example '><code>// This will mixin all functions from SomeClass\nnano.define('TestClass', {\n    mixin: 'some.namespace.SomeClass',\n    constructor: function() {\n        // Call mixed class contructor\n        this.mixins.SomeClass.constructor.call(this);\n    }\n});\n\n// This will mix only two methods: 'foo' and 'bar'\nnano.define('TestClass', {\n    mixin: {\n        'SomeClass': { \n            cls: 'some.namespace.SomeClass',\n            methods: ['foo', 'bar'] \n        }\n    },\n    hello: function() {\n        this.foo();\n    }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Class name</p>\n</div></li><li><span class='pre'>o</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Class definition</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-encodeURI' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-encodeURI' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-encodeURI' class='name expandable'>encodeURI</a>( <span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> o</span> ) : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></div><div class='description'><div class='short'>Translate Object to uri params. ...</div><div class='long'><p>Translate Object to uri params.</p>\n\n<pre><code>nano.encodeURI({ foo: 'bar', bar: 'foo' });\n// return: foo=bar&amp;bar=foo\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-namespace' class='name expandable'>namespace</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> namespace, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> root, Mixed value</span> ) : Mixed</div><div class='description'><div class='short'>Create namespace. ...</div><div class='long'><p>Create namespace.</p>\n\n<p>If namespace exists, it will be just returned.</p>\n\n<p>NOTE: If value is provided and namespace already exists it will be overwrited!</p>\n\n<p>@example</p>\n\n<pre><code>// Create namespace on _nano_'s root object \n// (it's _window_ in browser)\nnano.namespace('foo.bar');\n\n// Creates window.foo.bar with value 'hello'\nnano.namespace('foo.bar', undefined, 'hello');\n\n// Multiple namespaces can be created too...\nnano.namespace(['foo.bar', object], ['bar.foo', root]);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespace</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Namespace name.</p>\n</div></li><li><span class='pre'>root</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Base object.</p>\n</div></li><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>Optional. Value to set.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>Newly created namespace.</p>\n</div></li></ul></div></div></div><div id='method-require' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-require' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-require' class='name expandable'>require</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> cls, <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> callback</span> ) : <a href=\"#!/api/nano\" rel=\"nano\" class=\"docClass\">nano</a></div><div class='description'><div class='short'>Loads required class. ...</div><div class='long'><p>Loads required class.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>cls</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Class name</p>\n</div></li><li><span class='pre'>callback</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a><div class='sub-desc'><p>Optional. Function to call after class is loaded.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/nano\" rel=\"nano\" class=\"docClass\">nano</a></span><div class='sub-desc'><p>@chainable</p>\n</div></li></ul></div></div></div><div id='method-tmpl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano'>nano</span><br/><a href='source/nano.html#nano-method-tmpl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano-method-tmpl' class='name expandable'>tmpl</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> text, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> data</span> ) : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></div><div class='description'><div class='short'>Template function. ...</div><div class='long'><p>Template function. It use _.template method but\nwith Twig syntax, so instead of:\n* &lt;% %> is {% %}\n* &lt;%= %> is {{ }}\n* &lt;%- %> is {{- }}</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'>\n</div></li><li><span class='pre'>data</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a>/<a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","mixedInto":[],"subclasses":[],"aliases":{},"inheritdoc":null,"superclasses":[],"tagname":"class","files":[{"href":"nano.html#nano","filename":"nano.js"}],"parentMixins":[],"html_meta":{},"alternateClassNames":[],"members":{"css_var":[],"event":[],"method":[{"tagname":"method","owner":"nano","name":"ajax","id":"method-ajax","meta":{}},{"tagname":"method","owner":"nano","name":"call","id":"method-call","meta":{}},{"tagname":"method","owner":"nano","name":"create","id":"method-create","meta":{}},{"tagname":"method","owner":"nano","name":"define","id":"method-define","meta":{}},{"tagname":"method","owner":"nano","name":"encodeURI","id":"method-encodeURI","meta":{}},{"tagname":"method","owner":"nano","name":"namespace","id":"method-namespace","meta":{}},{"tagname":"method","owner":"nano","name":"require","id":"method-require","meta":{}},{"tagname":"method","owner":"nano","name":"tmpl","id":"method-tmpl","meta":{}}],"css_mixin":[],"cfg":[],"property":[{"tagname":"property","owner":"nano","name":"autoload","id":"property-autoload","meta":{}},{"tagname":"property","owner":"nano","name":"noop","id":"property-noop","meta":{}},{"tagname":"property","owner":"nano","name":"scope","id":"property-scope","meta":{}}]},"extends":null,"requires":["_"],"singleton":true,"statics":{"event":[],"css_var":[],"method":[],"css_mixin":[],"cfg":[],"property":[]},"name":"nano","mixins":[],"code_type":"nop","inheritable":false,"uses":[],"id":"class-nano","component":false,"meta":{}});