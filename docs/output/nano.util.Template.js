Ext.data.JsonP.nano_util_Template({"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Template.html#nano-util-Template' target='_blank'>Template.js</a></div></pre><div class='doc-contents'><p>Javascript micro-templating code is borrowed from Unserscore.js</p>\n\n<p>Documentation is copied from http://documentcloud.github.com/underscore/#template</p>\n\n<h2>nano.util.Template.create(templateString, [context])</h2>\n\n<p>Compiles JavaScript templates into functions that can be evaluated for rendering.\nUseful for rendering complicated bits of HTML from JSON data sources. Template\nfunctions can both interpolate variables, using &lt;%= … %>, as well as execute\narbitrary JavaScript code, with &lt;% … %>. If you wish to interpolate a value,\nand have it be HTML-escaped, use &lt;%- … %> When you evaluate a template function,\npass in a context object that has properties corresponding to the template's\nfree variables. If you're writing a one-off, you can pass the context object\nas the second parameter to template in order to render immediately instead of\nreturning a template function.</p>\n\n<pre><code>var compiled = nano.util.Template.create(\"hello: &lt;%= name %&gt;\");\ncompiled({name : 'moe'});\n=&gt; \"hello: moe\"\n\nvar list = \"hello: &lt;%= name %&gt;\";\nnano.util.Template.create(list, {people : ['moe', 'curly', 'larry']});\n=&gt; \"hello: moe\"\n\nvar template = nano.util.Template.create(\"&lt;b&gt;&lt;%- value %&gt;&lt;/b&gt;\");\ntemplate({value : '&lt;script&gt;'});\n=&gt; \"&lt;b&gt;&amp;lt;script&amp;gt;&lt;/b&gt;\"\n</code></pre>\n\n<p>You can also use print from within JavaScript code. This is sometimes more\nconvenient than using &lt;%= ... %>.</p>\n\n<pre><code>var compiled = nano.util.Template.create(\"&lt;% print('Hello ' + epithet); %&gt;\");\ncompiled({epithet: \"stooge\"});\n=&gt; \"Hello stooge.\"\n</code></pre>\n\n<p>If ERB-style delimiters aren't your cup of tea, you can change Underscore's\ntemplate settings to use different symbols to set off interpolated code.\nDefine an interpolate regex to match expressions that should be interpolated\nverbatim, an escape regex to match expressions that should be inserted after\nbeing HTML escaped, and an evaluate regex to match expressions that should be\nevaluated without insertion into the resulting string. You may define or\nomit any combination of the three. For example, to perform Mustache.js style\ntemplating:</p>\n\n<pre><code>nano.util.Template.templateSettings = {\n    interpolate : /\\{\\{(.+?)\\}\\}/g\n};\n\nvar template = nano.util.Template.create(\"Hello {{ name }}!\");\ntemplate({name : \"Mustache\"});\n=&gt; \"Hello Mustache!\"\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-create' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='nano.util.Template'>nano.util.Template</span><br/><a href='source/Template.html#nano-util-Template-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/nano.util.Template-method-create' class='name expandable'>create</a>( <span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a> str, <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> data</span> ) : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></div><div class='description'><div class='short'>Return template. ...</div><div class='long'><p>Return template.</p>\n\n<pre class='inline-example '><code>var body = document.getElementsByTagName('body')[0];\n\nvar template = nano.util.Template.create('&lt;span&gt;&lt;%=name%&gt;&lt;/span&gt;');\nbody.innerHTML = template({name: 'Tom'});\n\nbody.innerHTML = nano.util.Template.create('&lt;span&gt;&lt;%=name%&gt;&lt;/span&gt;', {name: 'Tom'});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>str</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>Template string.</p>\n</div></li><li><span class='pre'>data</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>Data passed to template.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","mixedInto":[],"subclasses":[],"aliases":{},"inheritdoc":null,"superclasses":[],"tagname":"class","files":[{"href":"Template.html#nano-util-Template","filename":"Template.js"}],"parentMixins":[],"html_meta":{},"alternateClassNames":[],"members":{"css_var":[],"event":[],"method":[{"tagname":"method","owner":"nano.util.Template","name":"create","id":"method-create","meta":{}}],"css_mixin":[],"cfg":[],"property":[]},"extends":null,"requires":[],"singleton":true,"statics":{"event":[],"css_var":[],"method":[],"css_mixin":[],"cfg":[],"property":[]},"name":"nano.util.Template","mixins":[],"code_type":"assignment","inheritable":false,"uses":[],"id":"class-nano.util.Template","component":false,"meta":{}});